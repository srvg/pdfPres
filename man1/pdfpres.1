.TH PDFPRES 1 "January 2012" "pdfpres" "Dual head PDF presenter"
.SH NAME
pdfpres \- Dual head PDF presenter
.SH SYNOPSIS
\fBpdfpres\fP
[\fB\-w\fP]
[\fB\-n\fP]
[\fB\-s\fP \fIslides\fP]
[\fB\-c\fP \fIcache\fP]
[\fB\-N\fP \fInotes\fP]
[\fB\-T\fP]
[\fB\-C\fP]
[\fB\-V\fP]
\fIFILE\fP
.SH DESCRIPTION
\fBpdfpres\fP is a presentation program for PDF files. It uses a
\(lqdual head\(rq-layout: One window shows the previous, current and
next slides while another window only shows the current slide. That
additional window can be moved to an external screen (such as a beamer).
Thus, you can present your slides on a beamer while keeping an eye on
what's coming up next.
.SH OPTIONS
.TP
\fB\-s\fP \fIslides\fP
This parameter allows you to specify how many slides before/after the
current slide you wish to see, i.e. 3 means \(lqpreview the next 3
slides while still showing the previous 3 slides\(rq. The default is 1.

Attention: It is recommended to set the number of slides not greater
than 2 unless you have a large screen with a high resolution.
.TP
\fB\-c\fP \fIcache\fP
Specify the number of slides that can be cached/pre-rendered.

Be aware, though, that this value will always be at least \(lqnumber of
pdf viewports\(rq \(mu 2. This is needed so that we can pre-render the
current and next slide for each viewport. Hence, switching to the next
(or previous) slides will always be instant.
.TP
\fB\-w\fP
Enables wrapping. When you're on the last slide and wrapping is enabled,
switching to the \(lqnext\(rq slide actually switches to the very first
slide.
.TP
\fB\-n\fP
Enables \(lqnote control\(rq. The number of the slide which is currently
shown will be written to \fBstdout\fP. You can pipe this information to
another program. That'll allow you to do fancy things.
.TP
\fB\-N\fP \fInotes\fP
Allows you to specify a file with notes that will be loaded on startup.
The file has to be in the same format that \fBpdfpres\fP uses when saving
notes.
.TP
\fB\-C\fP
Forces the timer to be a clock, so it shows the current time.
.TP
\fB\-T\fP
Opposite of \fB\-C\fP, forces the timer to be a timer.
.TP
\fB\-v\fP
Show current version of \fBpdfpres\fP.
.P
Command line arguments take precedence over permanent settings (see
\fBCONFIGURATION\fP).
.SH KEYS
Full customization of all keybinds is planned. Currently, you can only
use the following fixed keybinds to control \fBpdfpres\fP:
.P
Use the \fBcursor keys\fP to navigate. \fBSpace\fP, \fBReturn\fP,
\fBRight\fP, \fBDown\fP and \fBPage Down\fP also go the next slide,
\fBLeft\fP, \fBUp\fP and \fBPage Up\fP go to the previous slide. \fBLeft
Mouse\fP switches to the next slide, \fBRight Mouse\fP switches to the
previous slide.
.P
\fBp\fP switches to \fB\(lqfit page\(rq\fP, this is the default.
.P
\fBw\fP switches to \fB\(lqfit width\(rq\fP mode, \fBh\fP switches to
\fB\(lqfit height\(rq\fP mode.
.P
\fBF5\fP emulates \(lqStart Presentation\(rq like in LibreOffice. That
is, fullscreen is activated and the timer is started.
.P
\fBF6\fP forces a full refresh.
.P
\fBEsc\fP and \fBq\fP quit the program. If \fBq_exits_fullscreen\fP is
set (see \fBCONFIGURATION\fP), those keys only end fullscreen mode. You
then need a second keypress to exit \fBpdfpres\fP.
.P
Sometimes you need to browse your slides but that would, inevitably,
confuse the audience. So fixating the current slide on the beamer while
still allowing free navigation in the preview window should be quite
handy. Lock it by pressing \fBl\fP and unlock it with a capital \fBL\fP.
.P
In locked mode, press \fBJ\fP to jump to the currently selected slide.
.P
Alternatively, you can press \fBb\fP or \fB.\fP (period) to blank the
beamer window \(em it'll turn into a plain black window. Pressing
\fBb\fP or \fB.\fP again will return the \fIcurrent\fP slide. Note: Even
with a blank beamer window you can still browse your slides.
.P
To switch to fullscreen, press \fBf\fP. You could also use your window
manager for this purpose. That is, \fBAlt + F11\fP would do the same in
Xfce. The beamer window is moved to the current monitor (that is, that
monitor the mouse pointer is currently on) before fullscreen mode is
activated.
.P
\fBs\fP starts the timer, pauses it and continues if paused. \fBr\fP
resets the timer.
.P
\fBc\fP toggles cursor visibility in presentation window.
.P
\fBi\fP enters note edit mode, \fBEsc\fP leaves note edit mode.
.P
Type a number and then \fBG\fP or \fBReturn\fP to jump to the
appropriate slide.
.SH CONFIGURATION
\fBpdfpres\fP writes all of its configuration variables to
\fI~/.config/pdfpres/config.xml\fP on exit. This file will look
like this:
.P
.ft C
.nf
<?xml version="1.0" encoding="UTF-8"?>
<config>
	<initial_fit_mode v="2"/>
	<slide_context v="1"/>
	<do_wrapping v="0"/>
	<do_notectrl v="0"/>
	<cache_max v="32"/>
	<font_notes v="Sans 12"/>
	<font_timer v="Sans 35"/>
	<q_exits_fullscreen v="0"/>
	<timer_is_clock v="0"/>
	<stop_timer_on_fs v="0"/>
</config>
.fi
.ft
.P
For now, you're supposed to directly edit this file except for font
settings. If you change fonts inside \fBpdfpres\fP, they'll get saved
automatically.
.TP
.B initial_fit_mode
Accepts \fI0\fP, \fI1\fP or \fI2\fP meaning \fB\(lqfit width\(rq\fP,
\fB\(lqfit height\(rq\fP or \fB\(lqfit page\(rq\fP.
.TP
.B slide_context
Equivalent to the \fB\-s ...\fP parameter.
.TP
.B cache_max
Equivalent to the \fB\-c ...\fP parameter.
.TP
.B do_wrapping 
Equivalent to the \fB\-w\fP parameter. \fI1\fP enables wrapping and
everything else disables it.
.TP
.B do_notectrl
Equivalent to the \fB\-n\fP parameter. \fI1\fP enables note control and
everything else disables it.
.TP
.B font_notes
.TQ
.B font_timer
Set the font for notes and timer. This string will get parsed by
\fBpango_font_description_from_string\fP, so you might want to have a
look at the
GNOME API documentation
(http://library.gnome.org\:/devel\:/pango\:/unstable\:/pango-Fonts.html\:#pango\:-font-description\:-from-string)
to see what's possible.
.TP
.B q_exits_fullscreen
If this is set to \fI1\fP, then pressing \fBq\fP or \fBEsc\fP only exits
fullscreen mode and you'll need a second keypress on \fBq\fP or
\fBEsc\fP to exit the program. If it's \fI0\fP (default), then a single
keypress on \fBq\fP or \fBEsc\fP always quits \fBpdfpres\fP (unless
you're currently editing slide notes).
.TP
.B timer_is_clock
By default (\fI0\fP), a timer is shown. You can start it or stop it.
However, it's sometimes more useful to see the current real time. This
can be done by setting this option to \fI1\fP.
.TP
.B stop_timer_on_fs
By default (\fI0\fP), a running timer keeps running if you exit
fullscreen mode. On some setups, however, it may be required for the
timer to stop when fullscreen mode is being left. To do so, set this
option to \fI1\fP.
.SH "OLD FORMAT FOR SLIDE NOTES"
If you already used an old version of \fBpdfpres\fP that didn't save the
notes in XML, you can use the converter script to transform those notes
into XML:
.P
.ft C
.nf
$ ./legacy-notes-converter.py notes.txt > notes.xml
.fi
.ft
.P
The resulting file \fInotes.xml\fP can be read in \fBpdfpres\fP.
.P
Be aware that this script expects a file encoded with UTF-8. Use the
editor of your choice or \fBrecode\fP to transform any non-UTF-8 files
(you may adjust the input encoding) before you run the converter:
.P
.ft C
.nf
$ recode LATIN1..UTF8 < notes.txt > notes-utf8.txt
.fi
.ft
.P
.SH FILES
.TP
\fI~/.config/pdfpres/config.xml\fP
Local per user configuration.
.SH "DEPENDENCIES AND BUILDING"
If you need to manually compile \fBpdfpres\fP, the following libraries
and tools must be installed:
.IP \(bu 4
make
.IP \(bu 4
gtk2 (http://www.gtk.org/),
minimum tested version: 2.20.0,
.IP \(bu 4
glib, minimum tested version: 2.24.0,
.IP \(bu 4
poppler and poppler-glib (http://poppler.freedesktop.org/),
minimum tested version: 0.12.4.
.IP \(bu 4
libxml2 (http://www.xmlsoft.org/),
minimum tested version: 2.7.6.
.P
Once those are installed, you can build \fBpdfpres\fP as follows:
.P
.ft C
.nf
$ cd /path/to/sources
$ make
.fi
.ft
.SH BUGS
Currently, no bugs are known. If you find one, we invite you to report
it at
the GitHub Issue tracker (http://github.com/vain/pdfpres/issues).
.SH LICENSE
\fBpdfpres\fP is released as \(lqGPL3+\(rq. See the accompanying
\fILICENSE\fP file.
.SH AUTHORS
\fBpdfpres\fP was initially written by Peter Hofmann. Since then,
several people contributed code. Git tells you all the names:
.P
.ft C
.nf
$ git shortlog -sn
.fi
.ft
.SH "SEE ALSO"
.BR xpdf (1)
